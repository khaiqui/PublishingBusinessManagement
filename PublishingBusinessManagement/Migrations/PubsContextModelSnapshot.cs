// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PublishingBusinessManagement.Models;

#nullable disable

namespace PublishingBusinessManagement.Migrations
{
    [DbContext(typeof(PubsContext))]
    partial class PubsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Author", b =>
                {
                    b.Property<string>("AuId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("au_id");

                    b.Property<string>("Address")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("address");

                    b.Property<string>("AuFname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("au_fname");

                    b.Property<string>("AuLname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("au_lname");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<bool>("Contract")
                        .HasColumnType("bit")
                        .HasColumnName("contract");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasDefaultValue("UNKNOWN")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("state")
                        .IsFixedLength();

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("zip")
                        .IsFixedLength();

                    b.HasKey("AuId")
                        .HasName("UPKCL_auidind");

                    b.HasIndex(new[] { "AuLname", "AuFname" }, "aunmind");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Discount", b =>
                {
                    b.Property<decimal>("Discount1")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("discount");

                    b.Property<string>("Discounttype")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("discounttype");

                    b.Property<short?>("Highqty")
                        .HasColumnType("smallint")
                        .HasColumnName("highqty");

                    b.Property<short?>("Lowqty")
                        .HasColumnType("smallint")
                        .HasColumnName("lowqty");

                    b.Property<string>("StorId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("stor_id")
                        .IsFixedLength();

                    b.HasIndex("StorId");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Employee", b =>
                {
                    b.Property<string>("EmpId")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .HasColumnName("emp_id")
                        .IsFixedLength();

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fname");

                    b.Property<DateTime>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("job_id");

                    b.Property<byte?>("JobLvl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)10)
                        .HasColumnName("job_lvl");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lname");

                    b.Property<string>("Minit")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("minit")
                        .IsFixedLength();

                    b.Property<string>("PubId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasDefaultValue("9952")
                        .HasColumnName("pub_id")
                        .IsFixedLength();

                    b.HasKey("EmpId")
                        .HasName("PK_emp_id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("EmpId"), false);

                    b.HasIndex("JobId");

                    b.HasIndex("PubId");

                    b.HasIndex(new[] { "Lname", "Fname", "Minit" }, "employee_ind");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Lname", "Fname", "Minit" }, "employee_ind"));

                    b.ToTable("employee", null, t =>
                        {
                            t.HasTrigger("employee_insupd");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Job", b =>
                {
                    b.Property<short>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("job_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("JobId"));

                    b.Property<string>("JobDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("New Position - title not formalized yet")
                        .HasColumnName("job_desc");

                    b.Property<byte>("MaxLvl")
                        .HasColumnType("tinyint")
                        .HasColumnName("max_lvl");

                    b.Property<byte>("MinLvl")
                        .HasColumnType("tinyint")
                        .HasColumnName("min_lvl");

                    b.HasKey("JobId")
                        .HasName("PK__jobs__6E32B6A5318E3102");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.PubInfo", b =>
                {
                    b.Property<string>("PubId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("pub_id")
                        .IsFixedLength();

                    b.Property<byte[]>("Logo")
                        .HasColumnType("image")
                        .HasColumnName("logo");

                    b.Property<string>("PrInfo")
                        .HasColumnType("text")
                        .HasColumnName("pr_info");

                    b.HasKey("PubId")
                        .HasName("UPKCL_pubinfo");

                    b.ToTable("pub_info", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Publisher", b =>
                {
                    b.Property<string>("PubId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("pub_id")
                        .IsFixedLength();

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("USA")
                        .HasColumnName("country");

                    b.Property<string>("PubName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("pub_name");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("state")
                        .IsFixedLength();

                    b.HasKey("PubId")
                        .HasName("UPKCL_pubind");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Roysched", b =>
                {
                    b.Property<int?>("Hirange")
                        .HasColumnType("int")
                        .HasColumnName("hirange");

                    b.Property<int?>("Lorange")
                        .HasColumnType("int")
                        .HasColumnName("lorange");

                    b.Property<int?>("Royalty")
                        .HasColumnType("int")
                        .HasColumnName("royalty");

                    b.Property<string>("TitleId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("title_id");

                    b.HasIndex(new[] { "TitleId" }, "titleidind");

                    b.ToTable("roysched", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Sale", b =>
                {
                    b.Property<string>("StorId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("stor_id")
                        .IsFixedLength();

                    b.Property<string>("OrdNum")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ord_num");

                    b.Property<string>("TitleId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("title_id");

                    b.Property<DateTime>("OrdDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ord_date");

                    b.Property<string>("Payterms")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("payterms");

                    b.Property<short>("Qty")
                        .HasColumnType("smallint")
                        .HasColumnName("qty");

                    b.HasKey("StorId", "OrdNum", "TitleId")
                        .HasName("UPKCL_sales");

                    b.HasIndex(new[] { "TitleId" }, "titleidind");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Store", b =>
                {
                    b.Property<string>("StorId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("stor_id")
                        .IsFixedLength();

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("state")
                        .IsFixedLength();

                    b.Property<string>("StorAddress")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("stor_address");

                    b.Property<string>("StorName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("stor_name");

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("zip")
                        .IsFixedLength();

                    b.HasKey("StorId")
                        .HasName("UPK_storeid");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Title", b =>
                {
                    b.Property<string>("TitleId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("title_id");

                    b.Property<decimal?>("Advance")
                        .HasColumnType("money")
                        .HasColumnName("advance");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("PubId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("pub_id")
                        .IsFixedLength();

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Royalty")
                        .HasColumnType("int")
                        .HasColumnName("royalty");

                    b.Property<string>("Title1")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasDefaultValue("UNDECIDED")
                        .HasColumnName("type")
                        .IsFixedLength();

                    b.Property<int?>("YtdSales")
                        .HasColumnType("int")
                        .HasColumnName("ytd_sales");

                    b.HasKey("TitleId")
                        .HasName("UPKCL_titleidind");

                    b.HasIndex("PubId");

                    b.HasIndex(new[] { "Title1" }, "titleind");

                    b.ToTable("titles", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Titleauthor", b =>
                {
                    b.Property<string>("AuId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("au_id");

                    b.Property<string>("TitleId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("title_id");

                    b.Property<byte?>("AuOrd")
                        .HasColumnType("tinyint")
                        .HasColumnName("au_ord");

                    b.Property<int?>("Royaltyper")
                        .HasColumnType("int")
                        .HasColumnName("royaltyper");

                    b.HasKey("AuId", "TitleId")
                        .HasName("UPKCL_taind");

                    b.HasIndex(new[] { "AuId" }, "auidind");

                    b.HasIndex(new[] { "TitleId" }, "titleidind");

                    b.ToTable("titleauthor", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Titleview", b =>
                {
                    b.Property<string>("AuLname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("au_lname");

                    b.Property<byte?>("AuOrd")
                        .HasColumnType("tinyint")
                        .HasColumnName("au_ord");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("PubId")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .HasColumnName("pub_id")
                        .IsFixedLength();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<int?>("YtdSales")
                        .HasColumnType("int")
                        .HasColumnName("ytd_sales");

                    b.ToTable((string)null);

                    b.ToView("titleview", (string)null);
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublishingBusinessManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Discount", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Store", "Stor")
                        .WithMany()
                        .HasForeignKey("StorId")
                        .HasConstraintName("FK__discounts__stor___4F7CD00D");

                    b.Navigation("Stor");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Employee", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__employee__job_id__5BE2A6F2");

                    b.HasOne("PublishingBusinessManagement.Models.Publisher", "Pub")
                        .WithMany("Employees")
                        .HasForeignKey("PubId")
                        .IsRequired()
                        .HasConstraintName("FK__employee__pub_id__5EBF139D");

                    b.Navigation("Job");

                    b.Navigation("Pub");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.PubInfo", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Publisher", "Pub")
                        .WithOne("PubInfo")
                        .HasForeignKey("PublishingBusinessManagement.Models.PubInfo", "PubId")
                        .IsRequired()
                        .HasConstraintName("FK__pub_info__pub_id__571DF1D5");

                    b.Navigation("Pub");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Roysched", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK__roysched__title___4D94879B");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Sale", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Store", "Stor")
                        .WithMany("Sales")
                        .HasForeignKey("StorId")
                        .IsRequired()
                        .HasConstraintName("FK__sales__stor_id__4AB81AF0");

                    b.HasOne("PublishingBusinessManagement.Models.Title", "Title")
                        .WithMany("Sales")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK__sales__title_id__4BAC3F29");

                    b.Navigation("Stor");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Title", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Publisher", "Pub")
                        .WithMany("Titles")
                        .HasForeignKey("PubId")
                        .HasConstraintName("FK__titles__pub_id__412EB0B6");

                    b.Navigation("Pub");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Titleauthor", b =>
                {
                    b.HasOne("PublishingBusinessManagement.Models.Author", "Au")
                        .WithMany("Titleauthors")
                        .HasForeignKey("AuId")
                        .IsRequired()
                        .HasConstraintName("FK__titleauth__au_id__44FF419A");

                    b.HasOne("PublishingBusinessManagement.Models.Title", "Title")
                        .WithMany("Titleauthors")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK__titleauth__title__45F365D3");

                    b.Navigation("Au");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Author", b =>
                {
                    b.Navigation("Titleauthors");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Job", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Publisher", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("PubInfo");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("PublishingBusinessManagement.Models.Title", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Titleauthors");
                });
#pragma warning restore 612, 618
        }
    }
}
